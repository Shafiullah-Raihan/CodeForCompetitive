///fibonacci with dynamic programming

#include <bits/stdc++.h>
using namespace std;

#define endl "\n"
#define ll long long
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
int arr[] = {3,2,5,1,7,8,6,9,11,4};

void check(int l,int mid,int r)
{
    cout<< l<< " " << mid << " "<< r<< endl;
    int p=l,q=mid+1,len= r-l+1;
    vector<int>v(len);
    int k=0;
    for(int i=l;i<=r;i++){
        if(p>mid){
            v[k] = arr[q];
            k++,q++;
        }
        else if(q>r){
            v[k] = arr[p];
            p++,k++;
        }
        else if(arr[p]<=arr[q]){
            v[k] =arr[p];
            p++,k++;
        }
        else{
            v[k] = arr[q];
            q++,k++;
        }
    }
    k = 0;
    for(int i=l;i<=r;i++){
        arr[i] = v[k];
        k++;
    }
}



void mergeSort(int l,int r)
{
    //cout<< l<< " "<< r<<endl;
    if(l==r) return;
    int mid = (l+r)/2;

    mergeSort(l,mid);
    mergeSort(mid+1,r);
    check(l,mid,r);
    for(int i=0;i<=9;i++){
        cout<< arr[i]<< " ";
    }
    cout<< endl;
}



int main() {
    optimize();
    int len = (sizeof(arr)/sizeof(arr[0])) - 1;
    cout<< len<<endl;
    mergeSort(0,len);

    cout<< "Final Sort"<<endl;
    for(int i=0;i<=len;i++){
       cout<< arr[i]<< " ";
    }





    return 0;
}
