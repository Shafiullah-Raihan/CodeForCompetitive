///Singly Linked List


#include<bits/stdc++.h>
using namespace std;

struct Node
{
    int data;
    Node* next;
    Node(int value): data(value),next(nullptr) {}
};

 /// Traverse
void traverseLinkedList(Node* head)
{
    Node* curr = head;
    while(curr != nullptr){
        cout<< curr->data << " ";
        curr = curr->next;
    }
    cout<< endl;

}
//Search in linked list
bool searchLinkedList(Node* head,int target)
{
    while(head!=nullptr)
    {
        if(head->data == target){
            return true;
        }

        head = head->next;
    }
    return false;
}
//Length of Linked List
int findLength(Node* head)
{
    int length=0;
    Node* curr = head;
    while(curr != nullptr)
    {
        length++;
        curr = curr->next;
    }
    return length;
}

//Insert a node

Node* insertPos(Node* head,int pos,int data)
{
    if(pos<1)
    {
        cout<< "Invalid Position"<<endl;
        return head;
    }

    if(pos==1){
        Node* temp = new Node(data);
        temp->next = head;
        return temp;
    }

    Node* prev = head;
    int counter = 1;
    while(counter <pos-1 && prev != nullptr)
    {
        prev = prev->next;
        counter++;
    }

    if(prev== nullptr){
        cout<< "Invalid Position "<<endl;
        return head;
    }
    Node* temp = new Node(data);
    temp->next = prev->next;
    prev->next = temp;
    return head;



}

// Delete from specific Position

Node* deleteAtPosition(Node* head,int position)
{
    if(head== nullptr || position <1){
        return head;
    }
    if(position ==1)
    {
        Node* temp = head;
        head = head->next;
        delete temp;
        return head;
    }

    Node* current = head;
    for(int i=0;i<position-1 && current!= nullptr;i++)
    {
        current = current ->next;
    }
    if(current == nullptr || current->next ==nullptr)
    {
        return head;
    }
    Node* temp = current->next;
    current->next =  current->next->next;
    delete temp;
    return head;


}




int main()
{
    Node* head = new Node(1);
    Node* second = new Node(2);
    Node* third   = new Node(3);
    head->next = second;
    second->next = third;
    traverseLinkedList( head);



    return 0;
}
