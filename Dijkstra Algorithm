
///Dijkstra's Algorithm
#include<bits/stdc++.h>
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<vector<int>> vvi;

#define fore(i,a,b) for(int i=a;i<=b;i++)
#define forl(i,a,b) for(int i=a;i<b;i++)
#define nl cout<<endl
#define F first
#define S second
#define pb push_back
#define mp make_pair
#define endl "\n"
#define ll long long
#define bismillah ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);



void dijkstra(int source,vector<vector<pii>>&adj,int V)

{
    priority_queue<pii,vector<pii>,greater<pii>>pq;
    pq.push({0,source});
    vector<int>dist(V,INT_MAX);
     dist[source]= 0;
    while(!pq.empty()){
        int node = pq.top().S;
        int weight = pq.top().F;
        pq.pop();



        for(auto u:adj[node]){
                int neighbour = u.F;
                int edgeWeight = u.S;
            if(dist[node]+edgeWeight<dist[neighbour]){
                dist[neighbour]= dist[node]+edgeWeight;
                pq.push({dist[neighbour],neighbour});
            }
        }
    }
    for(int i=0;i<V;i++){
        if(dist[i]==INT_MAX){
            cout<< i << " Not Reachable ";
        }
        else{
            cout<< i<< " : "<< dist[i]<< endl;
        }
    }
}





int main() {
    bismillah;
    int V = 5;
    vector<vector<pii>> adj(V);


    adj[0].push_back({1, 10});
    adj[0].push_back({4, 5});
    adj[1].push_back({2, 1});
    adj[1].push_back({4, 2});
    adj[2].push_back({3, 4});
    adj[3].push_back({0, 7});
    adj[3].push_back({2, 6});
    adj[4].push_back({1, 3});
    adj[4].push_back({2, 9});
    adj[4].push_back({3, 2});


    dijkstra(0, adj, V);

    return 0;
}

